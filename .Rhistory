install.packages("devtools")
install.packages("roxygen2")
load_all()
devtools::load_all()
devtools::load_all(pkg = "SQLVis")
devtools::load_all(pkg = ".")
devtools::load_all(pkg = .)
devtools::load_all()
devtools::load_all(pkg = "SQLVis")
devtools::load_all()
devtools::load_all(pkg = "")
devtools::load_all(pkg = "E:\Documents\Egyetem\Szakdolgozat\SQLVis")
devtools::load_all(pkg = "E:\\Documents\\Egyetem\\Szakdolgozat\\SQLVis")
devtools::load_all(pkg = "E\:\\Documents\\Egyetem\\Szakdolgozat\\SQLVis")
devtools::load_all(pkg = "E:\\Documents\\Egyetem\\Szakdolgozat\\SQLVis")
devtools::load_all(pkg = "E:\\Documents\\Egyetem\\Szakdolgozat\\SQLVis")
devtools::load_all(".")
install.packages("RTools")
install.packages("Rtools")
install.packages("http://cran.r-project.org/bin/windows/Rtools/")
linechart <- function(tablename, attr, binwidth = 10, aggr = AVG,connid = 1){
query <- paste(sep = "", "SELECT BinnedValue * ", binwidth, " as value, CASE WHEN ", aggr, "(*) IS NOT NULL THEN ",aggr,"(*) ELSE '0' END AS aggr
FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,
",attr,"
FROM ",tabelname,") a
GROUP BY BinnedValue
ORDER BY BinnedValue",)
start <- Sys.time()
cdata <- db.q(conn.id = connid, query)
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(data=cdata, aes(x = value, y = aggr)) +
geom_line() +
geom_smooth(se = FALSE)
}
connect <- function(host = "localhost", user="gpadmin", dbname = "gpadmin", password = "password", port = 5432)
{
db.connect(host = host, user = user, dbname = dbname, password = password, port = port)
}
connect("192.168.0.29")
library(PivotalR)
connect("192.168.0.29")
linechart(tablename = "flightdata.little", attr = "distance")
linechart <- function(tablename, attr, binwidth = 10, aggr = "AVG",connid = 1){
query <- paste(sep = "", "SELECT BinnedValue * ", binwidth, " as value, CASE WHEN ", aggr, "(*) IS NOT NULL THEN ",aggr,"(*) ELSE '0' END AS aggr
FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,
",attr,"
FROM ",tabelname,") a
GROUP BY BinnedValue
ORDER BY BinnedValue",)
start <- Sys.time()
cdata <- db.q(conn.id = connid, query)
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(data=cdata, aes(x = value, y = aggr)) +
geom_line() +
geom_smooth(se = FALSE)
}
linechart(tablename = "flightdata.little", attr = "distance")
linechart <- function(tablename, attr, binwidth = 10, aggr = "AVG",connid = 1){
query <- paste(sep = "", "SELECT BinnedValue * ", binwidth, " as value, CASE WHEN ", aggr, "(*) IS NOT NULL THEN ",aggr,"(*) ELSE '0' END AS aggr FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,",attr," FROM ",tablename,") a GROUP BY BinnedValue ORDER BY BinnedValue")
start <- Sys.time()
cdata <- db.q(conn.id = connid, query)
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(data=cdata, aes(x = value, y = aggr)) +
geom_line() +
geom_smooth(se = FALSE)
}
linechart(tablename = "flightdata.little", attr = "distance")
linechart <- function(tablename, attr, binwidth = 10, aggr = "AVG",connid = 1){
query <- paste(sep = "", "SELECT BinnedValue * ", binwidth, " as value, CASE WHEN ", aggr, "(",attr,") IS NOT NULL THEN ",aggr,"(",attr,") ELSE '0' END AS aggr FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,",attr," FROM ",tablename,") a GROUP BY BinnedValue ORDER BY BinnedValue")
start <- Sys.time()
cdata <- db.q(conn.id = connid, query)
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(data=cdata, aes(x = value, y = aggr)) +
geom_line() +
geom_smooth(se = FALSE)
}
linechart(tablename = "flightdata.little", attr = "distance")
library(ggplot2)
linechart(tablename = "flightdata.little", attr = "distance")
linechart(tablename = "flightdata.little", attr = "distance", aggr = "COUNT")
linechart <- function(tablename, attr, binwidth = 10, aggr = "AVG",connid = 1){
query <- paste(sep = "", "SELECT BinnedValue * ", binwidth, " as value, CASE WHEN ", aggr, "(",attr,") IS NOT NULL THEN ",aggr,"(",attr,") ELSE '0' END AS aggr FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,",attr," FROM ",tablename,") a GROUP BY BinnedValue ORDER BY BinnedValue")
start <- Sys.time()
cdata <- db.q(conn.id = connid, query, nrows = "max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(data=cdata, aes(x = value, y = aggr)) +
geom_line() +
geom_smooth(se = FALSE)
}
linechart(tablename = "flightdata.little", attr = "distance", aggr = "COUNT")
histogram <- function(tablename, grouper, connid = 1){
query <- paste("SELECT COUNT(*) as count, ", grouper, "as groups  FROM ", tablename, " GROUP BY ", grouper, " ORDER BY ", grouper)
start <- Sys.time()
bardata <- db.q(conn.id = connid, query)
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(data = bardata, aes(groups, count)) + geom_bar(stat="identity") + scale_x_discrete(limits = bardata$groups)
}
histogram("flightdata.little", "month")
boxplot <- function(tablename, attr, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
query <- paste(sep="", "
SELECT ",aggr,"(",attr,") AS value
FROM (	SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,
",attr,"
FROM ",tablename,") a
GROUP BY BinnedValue")
start <- Sys.time()
boxdata <- db.q(query, nrows=”max”)
plot <- ggplot(boxdata, aes(x = "Boxplot", y=value)) +
geom_boxplot(outlier.color = "red")
if(jitter) p + geom_jitter()
else p
}
boxplot <- function(tablename, attr, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
query <- paste(sep="", "
SELECT ",aggr,"(",attr,") AS value
FROM (	SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,
",attr,"
FROM ",tablename,") a
GROUP BY BinnedValue")
start <- Sys.time()
boxdata <- db.q(query, nrows=”max”)
plot <- ggplot(boxdata, aes(x = "Boxplot", y=value)) +
geom_boxplot(outlier.color = "red")
if(jitter) {p + geom_jitter()}
else {p}
}
boxplot <- function(tablename, attr, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
query <- paste(sep="", "
SELECT ",aggr,"(",attr,") AS value
FROM (	SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,
",attr,"
FROM ",tablename,") a
GROUP BY BinnedValue")
start <- Sys.time()
boxdata <- db.q(query, nrows=”max”)
plot <- ggplot(boxdata, aes(x = "Boxplot", y=value)) +
geom_boxplot(outlier.color = "red")
if(as.logical(jitter)) {p + geom_jitter()}
else {p}
}
boxplot <- function(tablename, attr, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
query <- paste(sep="", "
SELECT ",aggr,"(",attr,") AS value
FROM (	SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue,
",attr,"
FROM ",tablename,") a
GROUP BY BinnedValue")
start <- Sys.time()
boxdata <- db.q(query, nrows=”max”)
plot <- ggplot(boxdata, aes(x = "Boxplot", y=value)) +
geom_boxplot(outlier.color = "red")
if(as.logical(jitter)) {plot + geom_jitter()}
else {plot}
}
boxplot <- function(tablename, attr, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
if(!is.logical(jitter)) stop("jitter must be a logical - TRUE or FALSE")
query <- paste(sep="", "SELECT ",aggr,"(",attr,") AS value FROM (	SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue, ",attr," FROM ",tablename,") a GROUP BY BinnedValue")
start <- Sys.time()
boxdata <- db.q(query, nrows=”max”)
plot <- ggplot(boxdata, aes(x = "Boxplot", y=value)) +
geom_boxplot(outlier.color = "red")
if(jitter) {plot + geom_jitter()}
else {plot}
}
boxplot <- function(tablename, attr, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
if(!is.logical(jitter)) stop("jitter must be a logical - TRUE or FALSE")
query <- paste(sep="", "SELECT ",aggr,"(",attr,") AS value FROM (	SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue, ",attr," FROM ",tablename,") a GROUP BY BinnedValue")
start <- Sys.time()
boxdata <- db.q(query, nrows="max")
plot <- ggplot(boxdata, aes(x = "Boxplot", y=value)) +
geom_boxplot(outlier.color = "red")
if(jitter) {plot + geom_jitter()}
else {plot}
}
boxplot("flightdata.little", "distance", jitter = TRUE)
parallel_boxplot <- function(tablename, attr, grouper, binwidth = 10, aggr = "AVG", jitter=FALSE,connid = 1){
query <- paste(sep="", "SELECT ",grouper," as grouper, ",aggr,"(",attr,") AS value FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue, ",attr,", ",grouper,"FROM ",tablename,") a GROUP BY BinnedValue, ", grouper)
start <- Sys.time()
pboxdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(pboxplot, aes(factor(grouper), value)) +
geom_boxplot()
}
parallel_boxplot(tablename = "flightdata.original", attr = "distance", grouper = "month")
parallel_boxplot <- function(tablename, attr, grouper, binwidth = 10, aggr = "AVG", connid = 1){
query <- paste(sep="", "SELECT ",grouper," as grouper, ",aggr,"(",attr,") AS value FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue, ",attr,", ",grouper," FROM ",tablename,") a GROUP BY BinnedValue, ", grouper)
start <- Sys.time()
pboxdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(pboxplot, aes(factor(grouper), value)) +
geom_boxplot()
}
parallel_boxplot(tablename = "flightdata.original", attr = "distance", grouper = "month")
parallel_boxplot <- function(tablename, attr, grouper, binwidth = 10, aggr = "AVG", connid = 1){
query <- paste(sep="", "SELECT ",grouper," as grouper, ",aggr,"(",attr,") AS value FROM (SELECT FLOOR(",attr," / ",binwidth,") + 1 AS BinnedValue, ",attr,", ",grouper," FROM ",tablename,") a GROUP BY BinnedValue, ", grouper)
start <- Sys.time()
pboxdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(pboxdata, aes(factor(grouper), value)) +
geom_boxplot()
}
parallel_boxplot(tablename = "flightdata.original", attr = "distance", grouper = "month")
heatdata <- db.q(“
SELECT BinnedDist * 300 AS distance,
CASE
WHEN AVG(nullif(airtime, 'NA')::int) = 0 THEN NULL
ELSE FLOOR(AVG(distance)/ AVG(nullif(airtime,'NA')::int))
END AS speed,
FLOOR(AVG(nullif(arrdelay,'NA')::int)) AS delay
FROM (
SELECT FLOOR(distance / 300) + 1 AS BinnedDist,
FLOOR(nullif(airtime, 'NA')::int / 135) +1 AS BinnedAirTime, FLOOR(nullif(arrdelay, 'NA')::int / 260) +1 AS BinnedDelay,
distance,
airtime,
arrdelay FROM flightdata.little) a
GROUP BY BinnedDist, BinnedAirTime;”,
nrows=”max”)
heatdata <- db.q(“SELECT BinnedDist * 300 AS distance, CASE WHEN AVG(nullif(airtime, 'NA')::int) = 0 THEN NULL ELSE FLOOR(AVG(distance)/ AVG(nullif(airtime,'NA')::int)) END AS speed, FLOOR(AVG(nullif(arrdelay,'NA')::int)) AS delay FROM(SELECT FLOOR(distance / 300) + 1 AS BinnedDist, FLOOR(nullif(airtime, 'NA')::int / 135) +1 AS BinnedAirTime, FLOOR(nullif(arrdelay, 'NA')::int / 260) +1 AS BinnedDelay, distance, airtime, arrdelay FROM flightdata.little) a GROUP BY BinnedDist, BinnedAirTime;”, nrows=”max”)
heatdata <- db.q("SELECT BinnedDist * 300 AS distance, CASE WHEN AVG(nullif(airtime, 'NA')::int) = 0 THEN NULL ELSE FLOOR(AVG(distance)/ AVG(nullif(airtime,'NA')::int)) END AS speed, FLOOR(AVG(nullif(arrdelay,'NA')::int)) AS delay FROM(SELECT FLOOR(distance / 300) + 1 AS BinnedDist, FLOOR(nullif(airtime, 'NA')::int / 135) +1 AS BinnedAirTime, FLOOR(nullif(arrdelay, 'NA')::int / 260) +1 AS BinnedDelay, distance, airtime, arrdelay FROM flightdata.little) a GROUP BY BinnedDist, BinnedAirTime;”, nrows=”max”)
)
""
""
heatdata <- db.q("SELECT BinnedDist * 300 AS distance, CASE WHEN AVG(nullif(airtime, 'NA')::int) = 0 THEN NULL ELSE FLOOR(AVG(distance)/ AVG(nullif(airtime,'NA')::int)) END AS speed, FLOOR(AVG(nullif(arrdelay,'NA')::int)) AS delay FROM(SELECT FLOOR(distance / 300) + 1 AS BinnedDist, FLOOR(nullif(airtime, 'NA')::int / 135) +1 AS BinnedAirTime, FLOOR(nullif(arrdelay, 'NA')::int / 260) +1 AS BinnedDelay, distance, airtime, arrdelay FROM flightdata.little) a GROUP BY BinnedDist, BinnedAirTime;", nrows="max")
heatdata <- db.q("SELECT BinnedDist * 300 AS distance, CASE WHEN AVG(nullif(airtime, 'NA')::int) = 0 THEN NULL ELSE FLOOR(AVG(distance)/ AVG(nullif(airtime,'NA')::int)) END AS speed, FLOOR(AVG(nullif(arrdelay,'NA')::int)) AS delay FROM(SELECT FLOOR(distance / 300) + 1 AS BinnedDist, FLOOR(nullif(arrdelay, 'NA')::int / 260) +1 AS BinnedDelay, distance, airtime, arrdelay FROM flightdata.little) a GROUP BY BinnedDist, BinnedAirTime;", nrows="max")
heatdata <- db.q("SELECT BinnedDist * 300 AS distance, CASE WHEN AVG(nullif(airtime, 'NA')::int) = 0 THEN NULL ELSE FLOOR(AVG(distance)/ AVG(nullif(airtime,'NA')::int)) END AS speed, FLOOR(AVG(nullif(arrdelay,'NA')::int)) AS delay FROM(SELECT FLOOR(distance / 300) + 1 AS BinnedDist, FLOOR(nullif(airtime, 'NA')::int / 135) +1 AS BinnedAirTime, distance, airtime, arrdelay FROM flightdata.little) a GROUP BY BinnedDist, BinnedAirTime;", nrows="max")
ggplot(heatdata, aes(x=distance, y=speed)) +
geom_tile(show.legend = FALSE, aes(fill=heatdata$delay)) + scale_fill_gradient2(
low = "#0000FF",
mid = "#00FF00",
high = "#FF0000",
midpoint = max(heatdata$delay, na.rm=TRUE) / 2,
name = "Késés [óra]") +
labs(x="Távolság [mérfold]", y="Sebesség [mérfold / óra]")
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(",grouper2,") as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
heatmap <- function(tablename, grouper1, binwidth1, grouper2, binwidth2, attr, aggr, connid = 1){
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(",grouper2,") as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
}
heatmap("flightdata.little", "distance", 300, "airtime", 135, "arrdelay", "AVG")
heatmap <- function(tablename, grouper1, binwidth1, grouper2, binwidth2, attr, aggr, connid = 1){
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(",grouper2,"::int) as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
}
heatmap("flightdata.little", "distance", 300, "airtime", 135, "arrdelay", "AVG")
heatmap <- function(tablename, grouper1, binwidth1, grouper2, binwidth2, attr, aggr, connid = 1){
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(nullif(",grouper2,", 'NA')::int) as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
}
heatmap("flightdata.little", "distance", 300, "airtime", 135, "arrdelay", "AVG")
heatmap <- function(tablename, grouper1, binwidth1, grouper2, binwidth2, attr, aggr, connid = 1){
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(nullif(",grouper2,", 'NA')::int) as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(heatmapdata, aes(x=xvalue, y=yvalue)) +
geom_tile(show.legend = FALSE, aes(fill=heatmapdat$zvalue)) + scale_fill_gradient2(
low = "#0000FF",
mid = "#00FF00",
high = "#FF0000",
midpoint = max(heatdata$zvalue, na.rm=TRUE) / 2
}
heatmap <- function(tablename, grouper1, binwidth1, grouper2, binwidth2, attr, aggr, connid = 1){
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(nullif(",grouper2,", 'NA')::int) as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(heatmapdata, aes(x=xvalue, y=yvalue)) +
geom_tile(show.legend = FALSE, aes(fill=heatmapdat$zvalue)) + scale_fill_gradient2(
low = "#0000FF",
mid = "#00FF00",
high = "#FF0000",
midpoint = max(heatdata$zvalue, na.rm=TRUE) / 2)
}
heatmap("flightdata.little", "distance", 300, "airtime", 135, "arrdelay", "AVG")
heatmap <- function(tablename, grouper1, binwidth1, grouper2, binwidth2, attr, aggr, connid = 1){
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(nullif(",grouper2,", 'NA')::int) as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
ggplot(heatmapdata, aes(x=xvalue, y=yvalue)) +
geom_tile(show.legend = FALSE, aes(fill=heatmapdata$zvalue)) + scale_fill_gradient2(
low = "#0000FF",
mid = "#00FF00",
high = "#FF0000",
midpoint = max(heatdata$zvalue, na.rm=TRUE) / 2)
}
heatmap("flightdata.little", "distance", 300, "airtime", 135, "arrdelay", "AVG")
query <- paste(sep = "", "SELECT BinnedValue1 * ", binwidth1, " AS xvalue, ", aggr, "(nullif(",grouper2,", 'NA')::int) as yvalue, FLOOR(", aggr, "(nullif(",attr,",'NA')::int)) AS zvalue FROM(SELECT FLOOR(", grouper1, " / ", binwidth1, ") + 1 AS BinnedValue1, FLOOR(nullif(", grouper2, ", 'NA')::int / ", binwidth2, ") +1 AS BinnedValue2, ", grouper1, ", ", grouper2, ", ", attr, " FROM ", tablename, ") a GROUP BY BinnedValue1, BinnedValue2")
start <- Sys.time()
heatmapdata <- db.q(query, nrows="max")
cat(paste("Query run time:",as.difftime(Sys.time() - start)))
heatmap("flightdata.little", "distance", 300, "airtime", 135, "arrdelay", "AVG")
linechart("flightdata.little", "distance")
linechart("flightdata.little", "distance", aggr="COUNT")
linechart("flightdata.little", "distance", aggr="median")
linechart("flightdata.little", "distance", aggr="stddev")
setwd("E:/Documents/Egyetem/Szakdolgozat/SQLVis")
library(SQLVis)
